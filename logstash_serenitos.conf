#
input
{
#stdin{
#    codec => multiline {
      # Grok pattern names are valid! :)
#      pattern => "^%{TIME:timestamp} "
#      negate => true
#      what => "previous"
#    }
#}
file{
	#path=>"/usr/local/Cellar/logstash/7.2.0/bin/test.log"
  path=>"/Users/ifmusic/Desktop/logs/JBossLog/*"
	mode=>"read"
	  codec => multiline {
      # Grok pattern names are valid! :)
      pattern => "^%{TIME:timestamp} "
      negate => true
      what => "previous"
    }
    file_completed_action =>"log"
    file_completed_log_path =>"/usr/local/Cellar/logstash/7.2.0/bin/test.path.log"
    file_chunk_size => "65536"
    sincedb_path => "/dev/null"
    start_position => "beginning"
}
}

filter {
  grok {
    match => { "message" =>["%{TIME:timestamp} %{LOGLEVEL:loglevel} \[%{DATA:method}\] \(%{DATA}\) thread \#%{NUMBER:thread_id} %{DATA}\)\: %{GREEDYDATA:xml_data}",
                            "%{TIME:timestamp} %{LOGLEVEL:loglevel} \[%{DATA:method}\] \(%{DATA:thread_id}\) %{GREEDYDATA:xml_data}"]
                         }
    tag_on_failure => ["grok_fail_general"]
  }
  #obtengo la fecha , desde el nombre de archivo
  grok {
    match => { "path" => "%{DATA}Danone\-ThemisLacteos\_PM\.log\.(?<date>%{YEAR}-%{MONTHNUM}-%{MONTHDAY})" }
    tag_on_failure => ["grok_fail_filename_pattern"]
  }
  #Junto la fecha y la hora
  mutate {
    replace => { "timestamp" => "%{date} %{timestamp}" }
  }
  date
  {
  match => [ "timestamp",  "yyyy-MM-dd HH:mm:ss,SSS" ]
  }
   mutate {
    remove_field => [ "date","timestamp"]
  }

  #Tratamiento de mensaje AMQ / XML
 if "Mensaje de entrada" in [xml_data]
 { 
  grok {
    match => { "xml_data" => "Mensaje de entrada:\ Q\|%{NUMBER:iDoc}" }
     tag_on_failure => ["grok_fail_amq_pattern"]
  }
  mutate {
    add_tag => [ "amq"]
  }
 }
 else 
 {
  #Se trata de una conversacion al web service. Request o Response?
   mutate {
     add_tag => [ "ws_call" ]
   }
   #parseo del XML en xml_data
   #Es Request o Response?
   if "Response" in [xml_data]
    {
      mutate {
         add_tag => ["ws_response"]
       }
     grok {    
     #busco el string que indica el valor de la respuesta y guardo ese valor en wsresult. 
     match => { "xml_data" => "\<a\:Error\>%{WORD:ws_result_with_errors}\<\/a\:Error\>"}
     tag_on_failure => ["grokfail_ws_request"] 
     }
    }
   else
   {
    #Es un request?
     mutate {
      add_tag => [ "ws_request" ]
     }   
    #Intentamos obtener un iDoc
    grok {
        match => { "xml_data" => "\<iDoc\>%{NUMBER:iDoc}" }
        tag_on_failure => ["grok_fail_ws_request_idoc"]
        }
    }
    
   }

   #ya que estamos, parseo el xml completo a un objeto json
   #Disabled! Genera 600+ campos al dejarlo automatico...
   #xml {
   #    source => "xml_data"
   #    target => "doc"
   #  }
 }
 

output
{
stdout{codec=>"rubydebug"}

	elasticsearch {
		hosts => "localhost:9200"
		user => "elastic"
		password => "changeme"
	}
}
